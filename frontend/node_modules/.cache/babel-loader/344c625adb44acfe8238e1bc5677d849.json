{"ast":null,"code":"import { SIGN_OUT, SIGN_IN, CREATE_CHANNEL, FETCH_CHANNEL, FETCH_CHANNELS, EDIT_CHANNEL, DELETE_CHANNEL, SELECT_CHANNEL } from \"./types\";\nimport channels from \"../apis/channels\";\nimport _ from \"lodash\";\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n}; //#region channels\n\nexport const selectChannel = channelId => {\n  return {\n    type: SELECT_CHANNEL,\n    payload: channelId\n  };\n};\nexport const createChannel = formValues => async (dispatch, getState) => {\n  const response = await channels.post(\"/channel\", {\n    formValues\n  });\n  dispatch({\n    type: CREATE_CHANNEL,\n    payload: response.data\n  }); // do some programmatic navigation to get the user\n  // back to the main page StreamList\n  //history.push(\"/\");\n};\nexport const fetchChannels = () => async dispatch => {\n  const response = await channels.get(\"/channels\");\n  dispatch({\n    type: FETCH_CHANNELS,\n    payload: response.data\n  });\n};\nexport const fetchChannel = id => async dispatch => {\n  const response = await channels.get(`/channels/${id}`);\n  dispatch({\n    type: FETCH_CHANNEL,\n    payload: response.data\n  });\n};\nexport const editChannel = (id, formValues) => async dispatch => {\n  const response = await channels.patch(`/channel/${id}`, formValues);\n  dispatch({\n    type: EDIT_CHANNEL,\n    payload: response.data\n  }); //history.push(\"/\");\n};\nexport const deleteChannel = id => async dispatch => {\n  await channels.delete(`/channel/${id}`);\n  dispatch({\n    type: DELETE_CHANNEL,\n    payload: id\n  }); //history.push(\"/\");\n}; //#endregion\n\nexport const fetchMessages = channelId => async dispatch => {\n  const response = await channels.get(\"/messages\");\n\n  const channelMessages = _.filter(response.data, {\n    channelId: channelId\n  });\n\n  console.log(response.data);\n  console.log(channelMessages);\n  dispatch({\n    type: \"FETCH_MESSAGES\",\n    payload: channelMessages\n  });\n}; //#region Messages\n//#endregion","map":{"version":3,"sources":["/home/clem/Git/Komu/frontend/src/actions/index.js"],"names":["SIGN_OUT","SIGN_IN","CREATE_CHANNEL","FETCH_CHANNEL","FETCH_CHANNELS","EDIT_CHANNEL","DELETE_CHANNEL","SELECT_CHANNEL","channels","_","signIn","userId","type","payload","signOut","selectChannel","channelId","createChannel","formValues","dispatch","getState","response","post","data","fetchChannels","get","fetchChannel","id","editChannel","patch","deleteChannel","delete","fetchMessages","channelMessages","filter","console","log"],"mappings":"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","sourcesContent":["import {\n\tSIGN_OUT,\n\tSIGN_IN,\n\tCREATE_CHANNEL,\n\tFETCH_CHANNEL,\n\tFETCH_CHANNELS,\n\tEDIT_CHANNEL,\n\tDELETE_CHANNEL,\n\tSELECT_CHANNEL,\n} from \"./types\";\nimport channels from \"../apis/channels\";\nimport _ from \"lodash\";\n\nexport const signIn = (userId) => {\n\treturn {\n\t\ttype: SIGN_IN,\n\t\tpayload: userId,\n\t};\n};\n\nexport const signOut = () => {\n\treturn {\n\t\ttype: SIGN_OUT,\n\t};\n};\n\n//#region channels\n\nexport const selectChannel = (channelId) => {\n\treturn {\n\t\ttype: SELECT_CHANNEL,\n\t\tpayload: channelId,\n\t};\n};\n\nexport const createChannel = (formValues) => async (dispatch, getState) => {\n\tconst response = await channels.post(\"/channel\", { formValues });\n\tdispatch({ type: CREATE_CHANNEL, payload: response.data });\n\t// do some programmatic navigation to get the user\n\t// back to the main page StreamList\n\t//history.push(\"/\");\n};\n\nexport const fetchChannels = () => async (dispatch) => {\n\tconst response = await channels.get(\"/channels\");\n\tdispatch({ type: FETCH_CHANNELS, payload: response.data });\n};\n\nexport const fetchChannel = (id) => async (dispatch) => {\n\tconst response = await channels.get(`/channels/${id}`);\n\tdispatch({ type: FETCH_CHANNEL, payload: response.data });\n};\n\nexport const editChannel = (id, formValues) => async (dispatch) => {\n\tconst response = await channels.patch(`/channel/${id}`, formValues);\n\tdispatch({ type: EDIT_CHANNEL, payload: response.data });\n\t//history.push(\"/\");\n};\n\nexport const deleteChannel = (id) => async (dispatch) => {\n\tawait channels.delete(`/channel/${id}`);\n\tdispatch({ type: DELETE_CHANNEL, payload: id });\n\t//history.push(\"/\");\n};\n\n//#endregion\nexport const fetchMessages = (channelId) => async (dispatch) => {\n\tconst response = await channels.get(\"/messages\");\n\tconst channelMessages = _.filter(response.data, { channelId: channelId });\n\tconsole.log(response.data);\n\tconsole.log(channelMessages);\n\tdispatch({ type: \"FETCH_MESSAGES\", payload: channelMessages });\n};\n//#region Messages\n\n//#endregion\n"]},"metadata":{},"sourceType":"module"}